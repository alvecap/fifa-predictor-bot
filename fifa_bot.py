import logging
import re
import asyncio
from typing import Dict, List, Optional, Tuple, Any
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ConversationHandler,
    filters,
    ContextTypes
)

from config import TELEGRAM_TOKEN, WELCOME_MESSAGE, HELP_MESSAGE, TEAM_INPUT, ODDS_INPUT
from database import get_all_teams, save_prediction_log, check_user_subscription
from predictor import MatchPredictor, format_prediction_message

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Initialisation du pr√©dicteur
predictor = MatchPredictor()

# √âtats de conversation
VERIFY_SUBSCRIPTION = 1
TEAM_SELECTION = 2
ODDS_INPUT_TEAM1 = 3
ODDS_INPUT_TEAM2 = 4

# Constantes pour la pagination des √©quipes
TEAMS_PER_PAGE = 8

# Fonctions de base
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Envoie un message quand la commande /start est envoy√©e."""
    user = update.effective_user
    context.user_data["username"] = user.username
    
    # Message de bienvenue personnalis√© avec un bouton unique
    welcome_text = f"üëã *AL VE*, Bienvenue sur *FIFA 4x4 Predictor*!\n\n"
    welcome_text += "üèÜ Je vous aide √† *pr√©dire les r√©sultats* de matchs de football FIFA 4x4 "
    welcome_text += "en me basant sur des *donn√©es historiques* pr√©cises.\n\n"
    welcome_text += "‚ö†Ô∏è Pour utiliser toutes les fonctionnalit√©s, vous devez √™tre abonn√© "
    welcome_text += f"√† notre canal [AL VE CAPITAL](https://t.me/alvecapital1)."
    
    # Cr√©er un bouton unique pour la v√©rification
    keyboard = [
        [InlineKeyboardButton("üîç V√©rifier mon abonnement", callback_data="verify_subscription")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        welcome_text,
        parse_mode='Markdown',
        reply_markup=reply_markup,
        disable_web_page_preview=True
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Envoie un message d'aide quand la commande /help est envoy√©e."""
    # V√©rifier l'abonnement avant tout
    user_id = update.effective_user.id
    is_subscribed = await check_user_subscription(user_id)
    
    if not is_subscribed:
        await send_subscription_required(update.effective_message)
        return
    
    help_text = "*üîÆ FIFA 4x4 Predictor - Aide*\n\n"
    help_text += "*Commandes disponibles:*\n"
    help_text += "‚Ä¢ `/start` - D√©marrer le bot\n"
    help_text += "‚Ä¢ `/help` - Afficher ce message d'aide\n"
    help_text += "‚Ä¢ `/predict` - Commencer une pr√©diction\n"
    help_text += "‚Ä¢ `/teams` - Voir toutes les √©quipes disponibles\n"
    help_text += "‚Ä¢ `/check` - V√©rifier votre abonnement\n\n"
    help_text += "*Note:* Les cotes sont obligatoires pour obtenir des pr√©dictions pr√©cises.\n\n"
    help_text += "Pour plus de d√©tails, contactez l'administrateur du bot."
    
    await update.message.reply_text(help_text, parse_mode='Markdown')

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """G√®re les erreurs."""
    logger.error(f"Une erreur est survenue: {context.error}")
    
    if update and update.effective_message:
        try:
            await update.effective_message.reply_text(
                "D√©sol√©, une erreur s'est produite. Veuillez r√©essayer ou contacter l'administrateur."
            )
        except Exception as e:
            logger.error(f"Erreur lors de l'envoi du message d'erreur: {e}")

# Animation de v√©rification d'abonnement
async def animated_subscription_check(message, user_id, edit=False) -> bool:
    """Effectue une v√©rification d'abonnement avec animation et retourne le r√©sultat."""
    # Message initial
    verify_text = "üîç *V√©rification de votre abonnement*"
    
    if edit:
        msg = await message.edit_text(verify_text, parse_mode='Markdown')
    else:
        msg = await message.reply_text(verify_text, parse_mode='Markdown')
    
    # Animation styl√©e (cercle qui tourne)
    emojis = ["üïê", "üïë", "üïí", "üïì", "üïî", "üïï", "üïñ", "üïó", "üïò", "üïô", "üïö", "üïõ"]
    
    for i in range(len(emojis)):
        await msg.edit_text(
            f"{emojis[i]} *V√©rification de votre abonnement en cours...*",
            parse_mode='Markdown'
        )
        await asyncio.sleep(0.2)  # Animation rapide mais visible
    
    # Animation finale
    await msg.edit_text(
        "üîÑ *Connexion avec Telegram...*",
        parse_mode='Markdown'
    )
    await asyncio.sleep(0.5)
    
    # Effectuer la v√©rification
    is_subscribed = await check_user_subscription(user_id)
    
    if is_subscribed:
        # Animation de succ√®s
        success_frames = [
            "‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú",
            "‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú",
            "‚¨õ‚¨õ‚¨ú‚¨ú‚¨ú",
            "‚¨õ‚¨õ‚¨õ‚¨ú‚¨ú",
            "‚¨õ‚¨õ‚¨õ‚¨õ‚¨ú",
            "‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ",
            "‚úÖ *Abonnement v√©rifi√©!*"
        ]
        
        for frame in success_frames:
            await msg.edit_text(frame, parse_mode='Markdown')
            await asyncio.sleep(0.2)
        
        # Message final de succ√®s
        await msg.edit_text(
            "‚úÖ *Abonnement v√©rifi√©!*\n\n"
            "Vous √™tes bien abonn√© √† [AL VE CAPITAL](https://t.me/alvecapital1).\n"
            "Toutes les fonctionnalit√©s sont d√©sormais accessibles.",
            parse_mode='Markdown',
            disable_web_page_preview=True
        )
        
        # Nouveau message avec bouton pour commencer une pr√©diction
        keyboard = [
            [InlineKeyboardButton("üîÆ Faire une pr√©diction", callback_data="start_prediction")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await message.reply_text(
            "üèÜ *Que souhaitez-vous faire ?*",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        return True
    else:
        # Animation d'√©chec
        error_frames = [
            "‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú",
            "‚¨õ‚¨ú‚¨ú‚¨ú‚¨ú",
            "‚¨õ‚¨õ‚¨ú‚¨ú‚¨ú",
            "‚¨õ‚¨õ‚¨õ‚¨ú‚¨ú",
            "‚¨õ‚¨õ‚¨õ‚¨õ‚¨ú",
            "‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ",
            "‚ùå *Abonnement non d√©tect√©*"
        ]
        
        for frame in error_frames:
            await msg.edit_text(frame, parse_mode='Markdown')
            await asyncio.sleep(0.2)
        
        # Message d'erreur
        keyboard = [
            [InlineKeyboardButton("üì£ Rejoindre le canal", url="https://t.me/alvecapital1")],
            [InlineKeyboardButton("üîç V√©rifier √† nouveau", callback_data="verify_subscription")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await msg.edit_text(
            "‚ùå *Abonnement non d√©tect√©*\n\n"
            "Vous n'√™tes pas encore abonn√© √† [AL VE CAPITAL](https://t.me/alvecapital1).\n\n"
            "*Instructions:*\n"
            "1Ô∏è‚É£ Cliquez sur le bouton 'Rejoindre le canal'\n"
            "2Ô∏è‚É£ Abonnez-vous au canal\n"
            "3Ô∏è‚É£ Revenez ici et cliquez sur 'V√©rifier √† nouveau'",
            reply_markup=reply_markup,
            parse_mode='Markdown',
            disable_web_page_preview=True
        )
        return False

# Message standard quand l'abonnement est requis
async def send_subscription_required(message) -> None:
    """Envoie un message indiquant que l'abonnement est n√©cessaire."""
    keyboard = [
        [InlineKeyboardButton("üì£ Rejoindre le canal", url="https://t.me/alvecapital1")],
        [InlineKeyboardButton("üîç V√©rifier mon abonnement", callback_data="verify_subscription")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await message.reply_text(
        "‚ö†Ô∏è *Abonnement requis*\n\n"
        "Pour utiliser cette fonctionnalit√©, vous devez √™tre abonn√© √† notre canal.\n\n"
        "*Instructions:*\n"
        "1Ô∏è‚É£ Rejoignez [AL VE CAPITAL](https://t.me/alvecapital1)\n"
        "2Ô∏è‚É£ Cliquez sur 'üîç V√©rifier mon abonnement'",
        reply_markup=reply_markup,
        parse_mode='Markdown',
        disable_web_page_preview=True
    )

# Commande pour v√©rifier l'abonnement au canal
async def check_subscription_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """V√©rifie si l'utilisateur est abonn√© au canal @alvecapital1."""
    user_id = update.effective_user.id
    context.user_data["user_id"] = user_id
    
    # Utiliser l'animation de v√©rification
    await animated_subscription_check(update.message, user_id)

# Lancer une pr√©diction directement avec la commande predict
async def predict_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Lance le processus de pr√©diction quand la commande /predict est envoy√©e."""
    user_id = update.effective_user.id
    context.user_data["user_id"] = user_id
    
    # Utiliser l'animation de v√©rification
    is_subscribed = await animated_subscription_check(update.message, user_id)
    
    if is_subscribed:
        # Lancer la s√©lection des √©quipes apr√®s une courte pause
        await asyncio.sleep(0.5)
        await start_team_selection(update.message, context)

# Gestionnaire des boutons de callback
async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """G√®re les clics sur les boutons inline."""
    query = update.callback_query
    await query.answer()
    
    # R√©cup√©rer les donn√©es utilisateur
    user_id = query.from_user.id
    context.user_data["user_id"] = user_id
    context.user_data["username"] = query.from_user.username
    
    if query.data == "verify_subscription":
        # Utiliser l'animation de v√©rification
        await animated_subscription_check(query.message, user_id, edit=True)
    
    elif query.data == "start_prediction":
        # V√©rifier l'abonnement avant de lancer la pr√©diction
        is_subscribed = await check_user_subscription(user_id)
        
        if not is_subscribed:
            # Message d'erreur si l'abonnement n'est plus actif
            keyboard = [
                [InlineKeyboardButton("üì£ Rejoindre le canal", url="https://t.me/alvecapital1")],
                [InlineKeyboardButton("üîç V√©rifier mon abonnement", callback_data="verify_subscription")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                "‚ö†Ô∏è *Abonnement requis*\n\n"
                "Votre abonnement √† [AL VE CAPITAL](https://t.me/alvecapital1) n'est pas actif.\n"
                "Vous devez √™tre abonn√© pour utiliser cette fonctionnalit√©.",
                reply_markup=reply_markup,
                parse_mode='Markdown',
                disable_web_page_preview=True
            )
            return
        
        # Lancer la s√©lection des √©quipes
        await start_team_selection(query.message, context, edit=True)
    
    elif query.data.startswith("teams_page_"):
        # Gestion de la pagination pour les √©quipes
        page = int(query.data.split("_")[-1])
        await show_teams_page(query.message, context, page, edit=True)
    
    elif query.data.startswith("select_team1_"):
        # V√©rifier l'abonnement
        is_subscribed = await check_user_subscription(user_id)
        if not is_subscribed:
            keyboard = [
                [InlineKeyboardButton("üì£ Rejoindre le canal", url="https://t.me/alvecapital1")],
                [InlineKeyboardButton("üîç V√©rifier mon abonnement", callback_data="verify_subscription")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                "‚ö†Ô∏è *Abonnement requis*\n\n"
                "Votre abonnement √† [AL VE CAPITAL](https://t.me/alvecapital1) n'est plus actif.\n"
                "Vous devez √™tre abonn√© pour continuer cette action.",
                reply_markup=reply_markup,
                parse_mode='Markdown',
                disable_web_page_preview=True
            )
            return
        
        # Extraire le nom de l'√©quipe 1
        team1 = query.data.replace("select_team1_", "")
        context.user_data["team1"] = team1
        
        # Animation de s√©lection
        anim_frames = [
            f"‚úÖ *{team1}* s√©lectionn√©!",
            f"‚úÖ *{team1}* ‚úÖ",
            f"üéØ *{team1}* s√©lectionn√©!"
        ]
        
        for frame in anim_frames:
            await query.edit_message_text(frame, parse_mode='Markdown')
            await asyncio.sleep(0.3)
        
        # Puis passer √† la s√©lection de l'√©quipe 2
        await start_team2_selection(query.message, context, edit=True)
    
    elif query.data.startswith("select_team2_"):
        # V√©rifier l'abonnement
        is_subscribed = await check_user_subscription(user_id)
        if not is_subscribed:
            keyboard = [
                [InlineKeyboardButton("üì£ Rejoindre le canal", url="https://t.me/alvecapital1")],
                [InlineKeyboardButton("üîç V√©rifier mon abonnement", callback_data="verify_subscription")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                "‚ö†Ô∏è *Abonnement requis*\n\n"
                "Votre abonnement √† [AL VE CAPITAL](https://t.me/alvecapital1) n'est plus actif.\n"
                "Vous devez √™tre abonn√© pour continuer cette action.",
                reply_markup=reply_markup,
                parse_mode='Markdown',
                disable_web_page_preview=True
            )
            return
        
        # Extraire le nom de l'√©quipe 2
        team2 = query.data.replace("select_team2_", "")
        team1 = context.user_data.get("team1", "")
        
        if not team1:
            await query.edit_message_text(
                "‚ùå *Erreur de s√©lection*\n\n"
                "Veuillez recommencer la proc√©dure de s√©lection des √©quipes.",
                parse_mode='Markdown'
            )
            return
        
        # Sauvegarder l'√©quipe 2
        context.user_data["team2"] = team2
        
        # Animation de s√©lection
        anim_frames = [
            f"‚úÖ *{team2}* s√©lectionn√©!",
            f"‚úÖ *{team2}* ‚úÖ",
            f"üéØ *{team2}* s√©lectionn√©!"
        ]
        
        for frame in anim_frames:
            await query.edit_message_text(frame, parse_mode='Markdown')
            await asyncio.sleep(0.3)
        
        # Demander la premi√®re cote
        await query.edit_message_text(
            f"üí∞ *Saisie des cotes (obligatoire)*\n\n"
            f"Match: *{team1}* vs *{team2}*\n\n"
            f"Veuillez saisir la cote pour *{team1}*\n\n"
            f"_Exemple: 1.85_",
            parse_mode='Markdown'
        )
        
        # Passer en mode conversation pour recevoir les cotes
        context.user_data["awaiting_odds_team1"] = True
        context.user_data["odds_for_match"] = f"{team1} vs {team2}"
        
        return ODDS_INPUT_TEAM1
    
    elif query.data == "cancel":
        # Annulation d'une action
        await query.edit_message_text("‚ùå Op√©ration annul√©e.")
    
    elif query.data == "new_prediction":
        # V√©rifier l'abonnement avant de lancer une nouvelle pr√©diction
        is_subscribed = await check_user_subscription(user_id)
        
        if not is_subscribed:
            # Message d'erreur si l'abonnement n'est plus actif
            keyboard = [
                [InlineKeyboardButton("üì£ Rejoindre le canal", url="https://t.me/alvecapital1")],
                [InlineKeyboardButton("üîç V√©rifier mon abonnement", callback_data="verify_subscription")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                "‚ö†Ô∏è *Abonnement requis*\n\n"
                "Votre abonnement √† [AL VE CAPITAL](https://t.me/alvecapital1) n'est pas actif.\n"
                "Vous devez √™tre abonn√© pour utiliser cette fonctionnalit√©.",
                reply_markup=reply_markup,
                parse_mode='Markdown',
                disable_web_page_preview=True
            )
            return
        
        # Animation de v√©rification
        await animated_subscription_check(query.message, user_id, edit=True)
        
        # Si on arrive ici, l'abonnement est valide car la fonction animated_subscription_check a retourn√© True
        # Lancer la s√©lection des √©quipes
        await start_team_selection(query.message, context, edit=True)

# Fonction pour d√©marrer la s√©lection des √©quipes (premi√®re √©quipe)
async def start_team_selection(message, context, edit=False, page=0) -> None:
    """Affiche la premi√®re page de s√©lection d'√©quipe."""
    await show_teams_page(message, context, page, edit, is_team1=True)

# Fonction pour afficher une page d'√©quipes
async def show_teams_page(message, context, page=0, edit=False, is_team1=True) -> None:
    """Affiche une page de la liste des √©quipes."""
    teams = get_all_teams()
    
    # Calculer le nombre total de pages
    total_pages = (len(teams) + TEAMS_PER_PAGE - 1) // TEAMS_PER_PAGE
    
    # S'assurer que la page est valide
    page = max(0, min(page, total_pages - 1))
    
    # Obtenir les √©quipes pour cette page
    start_idx = page * TEAMS_PER_PAGE
    end_idx = min(start_idx + TEAMS_PER_PAGE, len(teams))
    page_teams = teams[start_idx:end_idx]
    
    # Cr√©er les boutons pour les √©quipes
    team_buttons = []
    row = []
    
    callback_prefix = "select_team1_" if is_team1 else "select_team2_"
    
    for i, team in enumerate(page_teams):
        row.append(InlineKeyboardButton(team, callback_data=f"{callback_prefix}{team}"))
        if len(row) == 2 or i == len(page_teams) - 1:
            team_buttons.append(row)
            row = []
    
    # Ajouter les boutons de navigation
    nav_buttons = []
    
    if page > 0:
        nav_buttons.append(InlineKeyboardButton("‚óÄÔ∏è Pr√©c√©dent", callback_data=f"teams_page_{page-1}"))
    
    if page < total_pages - 1:
        nav_buttons.append(InlineKeyboardButton("Suivant ‚ñ∂Ô∏è", callback_data=f"teams_page_{page+1}"))
    
    if nav_buttons:
        team_buttons.append(nav_buttons)
    
    # Ajouter bouton pour revenir en arri√®re si n√©cessaire
    if not is_team1:
        team_buttons.append([InlineKeyboardButton("‚óÄÔ∏è Retour", callback_data="start_prediction")])
    
    reply_markup = InlineKeyboardMarkup(team_buttons)
    
    # Texte du message
    team_type = "premi√®re" if is_team1 else "deuxi√®me"
    text = (
        f"üèÜ *S√©lection des √©quipes* (Page {page+1}/{total_pages})\n\n"
        f"Veuillez s√©lectionner la *{team_type} √©quipe* pour votre pr√©diction:"
    )
    
    if edit:
        await message.edit_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    else:
        await message.reply_text(text, reply_markup=reply_markup, parse_mode='Markdown')

# Fonction pour d√©marrer la s√©lection de la deuxi√®me √©quipe
async def start_team2_selection(message, context, edit=False, page=0) -> None:
    """Affiche les options de s√©lection pour la deuxi√®me √©quipe."""
    team1 = context.user_data.get("team1", "")
    
    if not team1:
        if edit:
            await message.edit_text(
                "‚ùå *Erreur*\n\nVeuillez d'abord s√©lectionner la premi√®re √©quipe.",
                parse_mode='Markdown'
            )
        else:
            await message.reply_text(
                "‚ùå *Erreur*\n\nVeuillez d'abord s√©lectionner la premi√®re √©quipe.",
                parse_mode='Markdown'
            )
        return
    
    # Afficher la page de s√©lection de la deuxi√®me √©quipe
    await show_teams_page(message, context, page, edit, is_team1=False)

# Gestionnaire pour la saisie de la cote de l'√©quipe 1
async def handle_odds_team1_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """G√®re la saisie de la cote pour la premi√®re √©quipe."""
    if not context.user_data.get("awaiting_odds_team1", False):
        return ConversationHandler.END
    
    # V√©rifier l'abonnement
    user_id = update.effective_user.id
    is_subscribed = await check_user_subscription(user_id)
    
    if not is_subscribed:
        await send_subscription_required(update.message)
        return ConversationHandler.END
    
    user_input = update.message.text.strip()
    team1 = context.user_data.get("team1", "")
    team2 = context.user_data.get("team2", "")
    
    # Extraire la cote
    try:
        odds1 = float(user_input.replace(",", "."))
        
        # V√©rifier que la cote est valide
        if odds1 < 1.01:
            await update.message.reply_text(
                "‚ùå *Valeur de cote invalide*\n\n"
                "La cote doit √™tre sup√©rieure √† 1.01.",
                parse_mode='Markdown'
            )
            return ODDS_INPUT_TEAM1
        
        # Sauvegarder la cote
        context.user_data["odds1"] = odds1
        context.user_data["awaiting_odds_team1"] = False
        
        # Animation de validation de la cote
        loading_message = await update.message.reply_text(
            f"‚úÖ Cote de *{team1}* enregistr√©e: *{odds1}*",
            parse_mode='Markdown'
        )
        
        # Demander la cote de l'√©quipe 2
        await asyncio.sleep(1)
        await loading_message.edit_text(
            f"üí∞ *Saisie des cotes (obligatoire)*\n\n"
            f"Match: *{team1}* vs *{team2}*\n\n"
            f"Veuillez maintenant saisir la cote pour *{team2}*\n\n"
            f"_Exemple: 2.35_",
            parse_mode='Markdown'
        )
        
        # Passer √† l'attente de la cote de l'√©quipe 2
        context.user_data["awaiting_odds_team2"] = True
        
        return ODDS_INPUT_TEAM2
    except ValueError:
        await update.message.reply_text(
            "‚ùå *Format incorrect*\n\n"
            f"Veuillez saisir uniquement la valeur num√©rique de la cote pour *{team1}*.\n\n"
            "Exemple: `1.85`",
            parse_mode='Markdown'
        )
        return ODDS_INPUT_TEAM1

# Gestionnaire pour la saisie de la cote de l'√©quipe 2
async def handle_odds_team2_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """G√®re la saisie de la cote pour la deuxi√®me √©quipe."""
    if not context.user_data.get("awaiting_odds_team2", False):
        return ConversationHandler.END
    
    # V√©rifier l'abonnement
    user_id = update.effective_user.id
    is_subscribed = await check_user_subscription(user_id)
    
    if not is_subscribed:
        await send_subscription_required(update.message)
        return ConversationHandler.END
    
    user_input = update.message.text.strip()
    team1 = context.user_data.get("team1", "")
    team2 = context.user_data.get("team2", "")
    odds1 = context.user_data.get("odds1", 0)
    
    # Extraire la cote
    try:
        odds2 = float(user_input.replace(",", "."))
        
        # V√©rifier que la cote est valide
        if odds2 < 1.01:
            await update.message.reply_text(
                "‚ùå *Valeur de cote invalide*\n\n"
                "La cote doit √™tre sup√©rieure √† 1.01.",
                parse_mode='Markdown'
            )
            return ODDS_INPUT_TEAM2
        
        # Sauvegarder la cote
        context.user_data["odds2"] = odds2
        context.user_data["awaiting_odds_team2"] = False
        
        # Animation de validation de la cote
        loading_message = await update.message.reply_text(
            f"‚úÖ Cote de *{team2}* enregistr√©e: *{odds2}*",
            parse_mode='Markdown'
        )
        
        # Animation de g√©n√©ration de pr√©diction
        await asyncio.sleep(0.5)
        await loading_message.edit_text(
            "üß† *Analyse des donn√©es en cours...*",
            parse_mode='Markdown'
        )
        
        # Animation stylis√©e pour l'analyse
        analysis_frames = [
            "üìä *Analyse des performances historiques...*",
            "üèÜ *Analyse des confrontations directes...*",
            "‚öΩ *Calcul des probabilit√©s de scores...*",
            "üìà *Finalisation des pr√©dictions...*"
        ]
        
        for frame in analysis_frames:
            await asyncio.sleep(0.7)
            await loading_message.edit_text(frame, parse_mode='Markdown')
        
        # G√©n√©ration de la pr√©diction
        prediction = predictor.predict_match(team1, team2, odds1, odds2)
        
        if not prediction or "error" in prediction:
            error_msg = prediction.get("error", "Erreur inconnue") if prediction else "Impossible de g√©n√©rer une pr√©diction"
            
            # Proposer de r√©essayer
            # Proposer de r√©essayer
            keyboard = [
                [InlineKeyboardButton("üîÑ Nouvelle pr√©diction", callback_data="new_prediction")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await loading_message.edit_text(
                f"‚ùå *Erreur de pr√©diction*\n\n"
                f"{error_msg}\n\n"
                f"Veuillez essayer avec d'autres √©quipes.",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            return ConversationHandler.END
        
        # Formater et envoyer la pr√©diction
        prediction_text = format_prediction_message(prediction)
        
        # Animation finale avant d'afficher le r√©sultat
        final_frames = [
            "üéØ *Pr√©diction pr√™te!*",
            "‚ú® *Affichage des r√©sultats...*"
        ]
        
        for frame in final_frames:
            await asyncio.sleep(0.5)
            await loading_message.edit_text(frame, parse_mode='Markdown')
        
        # Proposer une nouvelle pr√©diction
        keyboard = [
            [InlineKeyboardButton("üîÑ Nouvelle pr√©diction", callback_data="new_prediction")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await loading_message.edit_text(
            prediction_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
        # Enregistrer la pr√©diction dans les logs
        user_id = context.user_data.get("user_id", update.message.from_user.id)
        username = context.user_data.get("username", update.message.from_user.username)
        
        save_prediction_log(
            user_id=user_id,
            username=username,
            team1=team1,
            team2=team2,
            odds1=odds1,
            odds2=odds2,
            prediction_result=prediction
        )
        
        return ConversationHandler.END
    except ValueError:
        await update.message.reply_text(
            "‚ùå *Format incorrect*\n\n"
            f"Veuillez saisir uniquement la valeur num√©rique de la cote pour *{team2}*.\n\n"
            "Exemple: `2.35`",
            parse_mode='Markdown'
        )
        return ODDS_INPUT_TEAM2

# Fonction pour lister les √©quipes disponibles
async def teams_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Affiche la liste des √©quipes disponibles dans la base de donn√©es."""
    # V√©rifier l'abonnement avant de traiter
    user_id = update.effective_user.id
    is_subscribed = await check_user_subscription(user_id)
    
    if not is_subscribed:
        await send_subscription_required(update.message)
        return
    
    # R√©cup√©rer la liste des √©quipes
    teams = get_all_teams()
    
    if not teams:
        await update.message.reply_text("Aucune √©quipe n'a √©t√© trouv√©e dans la base de donn√©es.")
        return
    
    # Formater la liste des √©quipes
    teams_text = "üìã *√âquipes disponibles dans la base de donn√©es:*\n\n"
    
    # Grouper les √©quipes par lettre alphab√©tique
    teams_by_letter = {}
    for team in teams:
        first_letter = team[0].upper()
        if first_letter not in teams_by_letter:
            teams_by_letter[first_letter] = []
        teams_by_letter[first_letter].append(team)
    
    # Ajouter chaque groupe d'√©quipes
    for letter in sorted(teams_by_letter.keys()):
        teams_text += f"*{letter}*\n"
        for team in sorted(teams_by_letter[letter]):
            teams_text += f"‚Ä¢ {team}\n"
        teams_text += "\n"
    
    # Si le message est trop long, diviser en plusieurs messages
    if len(teams_text) > 4000:
        chunks = [teams_text[i:i+4000] for i in range(0, len(teams_text), 4000)]
        for chunk in chunks:
            await update.message.reply_text(chunk, parse_mode='Markdown')
    else:
        await update.message.reply_text(teams_text, parse_mode='Markdown')

# G√©rer les messages directs
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> Optional[int]:
    """R√©pond aux messages qui ne sont pas des commandes."""
    # Si l'utilisateur attend des cotes pour une √©quipe
    if context.user_data.get("awaiting_odds_team1", False):
        return await handle_odds_team1_input(update, context)
    
    if context.user_data.get("awaiting_odds_team2", False):
        return await handle_odds_team2_input(update, context)
    
    # V√©rifier l'abonnement avant de traiter
    user_id = update.effective_user.id
    is_subscribed = await check_user_subscription(user_id)
    
    if not is_subscribed:
        await send_subscription_required(update.message)
        return
    
    message_text = update.message.text.strip()
    
    # Rechercher si le message ressemble √† une demande de pr√©diction
    if " vs " in message_text or " contre " in message_text:
        # Informer l'utilisateur d'utiliser la m√©thode interactive
        keyboard = [
            [InlineKeyboardButton("üîÆ Faire une pr√©diction", callback_data="start_prediction")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "‚ÑπÔ∏è *Nouvelle m√©thode de pr√©diction*\n\n"
            "Pour une exp√©rience am√©lior√©e, veuillez utiliser notre syst√®me interactif de pr√©diction.\n\n"
            "Cliquez sur le bouton ci-dessous pour commencer une pr√©diction guid√©e avec s√©lection d'√©quipes et cotes obligatoires.",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        return
    
    # Message par d√©faut si aucune action n'est d√©clench√©e
    await update.message.reply_text(
        "Je ne comprends pas cette commande. Utilisez /help pour voir les commandes disponibles."
    )

# Fonction principale
def main() -> None:
    """D√©marre le bot."""
    try:
        # Cr√©er l'application
        application = Application.builder().token(TELEGRAM_TOKEN).build()

        # Ajouter les gestionnaires de commandes
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(CommandHandler("predict", predict_command))
        application.add_handler(CommandHandler("teams", teams_command))
        application.add_handler(CommandHandler("check", check_subscription_command))
        
        # Gestionnaire de conversation pour les cotes
        conv_handler = ConversationHandler(
            entry_points=[MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message)],
            states={
                ODDS_INPUT_TEAM1: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_odds_team1_input)],
                ODDS_INPUT_TEAM2: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_odds_team2_input)]
            },
            fallbacks=[CommandHandler("cancel", lambda u, c: ConversationHandler.END)]
        )
        application.add_handler(conv_handler)
        
        # Ajouter le gestionnaire pour les clics sur les boutons
        application.add_handler(CallbackQueryHandler(button_callback))
        
        # Ajouter le gestionnaire pour les messages normaux (apr√®s le ConversationHandler)
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        
        # Ajouter le gestionnaire d'erreurs
        application.add_error_handler(error_handler)

        # D√©marrer le bot
        logger.info(f"Bot d√©marr√© avec le token: {TELEGRAM_TOKEN[:5]}...")
        application.run_polling(allowed_updates=Update.ALL_TYPES)
        
    except Exception as e:
        logger.critical(f"ERREUR CRITIQUE lors du d√©marrage du bot: {e}")
        import traceback
        logger.critical(traceback.format_exc())

if __name__ == '__main__':
    main()
