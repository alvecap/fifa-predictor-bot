import logging
import re
from typing import Dict, List, Optional, Tuple, Any
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ConversationHandler,
    filters,
    ContextTypes
)

from config import TELEGRAM_TOKEN, WELCOME_MESSAGE, HELP_MESSAGE, TEAM_INPUT, ODDS_INPUT
from database import get_all_teams, save_prediction_log
from predictor import MatchPredictor, format_prediction_message

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Initialisation du pr√©dicteur
predictor = MatchPredictor()

# Fonctions de base
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Envoie un message quand la commande /start est envoy√©e."""
    # V√©rifier l'abonnement au canal
    is_subscribed = await check_subscription(update, context)
    
    if is_subscribed:
        # Cr√©er un message de bienvenue avec bouton pour commencer
        keyboard = [
            [InlineKeyboardButton("üîÆ Faire une pr√©diction", callback_data="start_prediction")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        welcome_text = (
            f"{WELCOME_MESSAGE}\n\n"
            f"üëá Cliquez sur le bouton ci-dessous pour commencer"
        )
        
        await update.message.reply_text(welcome_text, reply_markup=reply_markup)
    else:
        # L'utilisateur n'est pas abonn√©, message d√©j√† envoy√© par check_subscription
        pass

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Envoie un message d'aide quand la commande /help est envoy√©e."""
    await update.message.reply_text(HELP_MESSAGE, parse_mode='Markdown')

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """G√®re les erreurs."""
    logger.error(f"Une erreur est survenue: {context.error}")
    
    if update:
        # Envoi d'un message √† l'utilisateur
        await update.message.reply_text(
            "D√©sol√©, une erreur s'est produite. Veuillez r√©essayer ou contacter l'administrateur."
        )

# Fonction pour v√©rifier l'abonnement au canal
async def check_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
    """V√©rifie si l'utilisateur est abonn√© au canal @alvecapital1 et envoie un message si n√©cessaire."""
    user_id = update.effective_user.id
    
    try:
        # V√©rifier si l'utilisateur est membre du canal
        chat_member = await context.bot.get_chat_member(chat_id="@alvecapital1", user_id=user_id)
        
        # Statuts indiquant que l'utilisateur est membre
        member_statuses = ['creator', 'administrator', 'member']
        
        if chat_member.status in member_statuses:
            # L'utilisateur est abonn√©
            return True
        else:
            # L'utilisateur n'est pas abonn√©
            keyboard = [
                [InlineKeyboardButton("üì£ Rejoindre le canal", url="https://t.me/alvecapital1")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                "‚ùå Vous n'√™tes pas abonn√© √† notre canal @alvecapital1.\n\n"
                "L'abonnement est requis pour acc√©der aux pr√©dictions premium de FIFA 4x4.\n"
                "Rejoignez le canal puis retapez votre commande.",
                reply_markup=reply_markup
            )
            return False
    except Exception as e:
        logger.error(f"Erreur lors de la v√©rification d'abonnement: {e}")
        # En cas d'erreur, on laisse passer l'utilisateur
        return True

# Commande pour v√©rifier l'abonnement au canal
async def check_subscription_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """V√©rifie si l'utilisateur est abonn√© au canal @alvecapital1."""
    is_subscribed = await check_subscription(update, context)
    
    if is_subscribed:
        await update.message.reply_text(
            "‚úÖ F√©licitations! Vous √™tes bien abonn√© au canal @alvecapital1.\n\n"
            "Vous pouvez maintenant utiliser toutes les fonctionnalit√©s premium de FIFA 4x4 Predictor."
        )

# WebApp command
async def webapp_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Ouvre la WebApp pour les pr√©dictions FIFA 4x4"""
    # V√©rifier d'abord l'abonnement
    is_subscribed = await check_subscription(update, context)
    if not is_subscribed:
        return
        
    # URL de votre WebApp - remplacez par l'URL r√©elle apr√®s d√©ploiement
    webapp_url = "https://votre-username.github.io/fifa-predictor-bot/"
    
    webapp_button = InlineKeyboardButton(
        text="üìä Ouvrir l'application de pr√©diction",
        web_app=WebAppInfo(url=webapp_url)
    )
    
    keyboard = InlineKeyboardMarkup([[webapp_button]])
    
    await update.message.reply_text(
        "üîÆ *FIFA 4x4 PREDICTOR - APPLICATION WEB*\n\n"
        "Acc√©dez √† notre interface de pr√©diction avanc√©e avec:\n"
        "‚Ä¢ Pr√©dictions de scores pr√©cises\n"
        "‚Ä¢ Analyses statistiques d√©taill√©es\n"
        "‚Ä¢ Interface utilisateur intuitive\n\n"
        "Cliquez sur le bouton ci-dessous pour commencer ‚¨áÔ∏è",
        reply_markup=keyboard,
        parse_mode='Markdown'
    )

# Traitement des pr√©dictions simples
async def predict_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Traite la commande /predict pour les pr√©dictions de match."""
    # V√©rifier d'abord l'abonnement au canal
    is_subscribed = await check_subscription(update, context)
    if not is_subscribed:
        return
    
    # Extraire les √©quipes du message
    message_text = update.message.text[9:].strip()  # Enlever '/predict '
    
    # Essayer de trouver les noms d'√©quipes s√©par√©s par "vs" ou "contre"
    teams = re.split(r'\s+(?:vs|contre|VS|CONTRE)\s+', message_text)
    
    if len(teams) != 2 or not teams[0] or not teams[1]:
        # Si le format n'est pas correct, demander √† l'utilisateur de r√©essayer
        await update.message.reply_text(
            "üîç Format incorrect.\n\n"
            "Veuillez utiliser: `/predict √âquipe1 vs √âquipe2`\n"
            "Exemple: `/predict Manchester United vs Chelsea`",
            parse_mode='Markdown'
        )
        return
    
    team1 = teams[0].strip()
    team2 = teams[1].strip()
    
    # Afficher un message de chargement
    loading_message = await update.message.reply_text(
        "‚è≥ *Analyse en cours*\n\n"
        "‚Ä¢ Chargement des donn√©es historiques...\n"
        "‚Ä¢ Analyse des confrontations directes...\n"
        "‚Ä¢ Calcul des probabilit√©s...",
        parse_mode='Markdown'
    )
    
    # Obtenir la pr√©diction
    prediction = predictor.predict_match(team1, team2)
    
    # Si la pr√©diction a √©chou√©
    if not prediction or "error" in prediction:
        await loading_message.edit_text(
            f"‚ùå Impossible de g√©n√©rer une pr√©diction:\n"
            f"{prediction.get('error', 'Erreur inconnue')}"
        )
        return
    
    # Formater et envoyer la pr√©diction
    prediction_text = format_prediction_message(prediction)
    
    # Ajouter un bouton "Nouvelle pr√©diction"
    keyboard = [
        [InlineKeyboardButton("üîÑ Nouvelle pr√©diction", callback_data="new_prediction")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await loading_message.edit_text(
        prediction_text, 
        parse_mode='Markdown',
        reply_markup=reply_markup
    )
    
    # Enregistrer la pr√©diction dans les logs
    user = update.message.from_user
    save_prediction_log(
        user_id=user.id,
        username=user.username,
        team1=team1,
        team2=team2,
        prediction_result=prediction
    )

# Traitement des pr√©dictions avec cotes
async def odds_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Traite la commande /odds pour les pr√©dictions de match avec cotes."""
    # V√©rifier d'abord l'abonnement au canal
    is_subscribed = await check_subscription(update, context)
    if not is_subscribed:
        return
        
    # Extraire les √©quipes et les cotes du message
    message_parts = update.message.text[6:].strip().split()  # Enlever '/odds '
    
    # Trouver l'index de "vs" ou "contre"
    separator_index = -1
    for i, part in enumerate(message_parts):
        if part.lower() in ["vs", "contre"]:
            separator_index = i
            break
    
    if separator_index == -1 or separator_index == 0 or separator_index == len(message_parts) - 1:
        # Si le format n'est pas correct, demander √† l'utilisateur de r√©essayer
        await update.message.reply_text(
            "üîç Format incorrect.\n\n"
            "Veuillez utiliser: `/odds √âquipe1 vs √âquipe2 cote1 cote2`\n"
            "Exemple: `/odds Manchester United vs Chelsea 1.8 3.5`",
            parse_mode='Markdown'
        )
        return
    
    # Extraire les noms d'√©quipes
    team1 = " ".join(message_parts[:separator_index]).strip()
    
    # Chercher les cotes √† la fin
    odds_pattern = r'(\d+\.\d+)'
    odds_matches = re.findall(odds_pattern, " ".join(message_parts[separator_index+1:]))
    
    if len(odds_matches) < 2:
        # Si les cotes ne sont pas correctement format√©es
        team2 = " ".join(message_parts[separator_index+1:]).strip()
        odds1 = None
        odds2 = None
    else:
        # Extraire les deux derni√®res cotes trouv√©es
        odds1 = float(odds_matches[-2])
        odds2 = float(odds_matches[-1])
        
        # Extraire le nom de l'√©quipe 2 en enlevant les cotes
        team2_parts = message_parts[separator_index+1:]
        team2_text = " ".join(team2_parts)
        for odd in odds_matches[-2:]:
            team2_text = team2_text.replace(odd, "").strip()
        team2 = team2_text.rstrip("- ,").strip()
    
    # Afficher un message de chargement
    loading_message = await update.message.reply_text(
        "‚è≥ *Analyse en cours*\n\n"
        "‚Ä¢ Chargement des donn√©es historiques...\n"
        "‚Ä¢ Analyse des confrontations directes...\n"
        "‚Ä¢ Int√©gration des cotes bookmakers...\n"
        "‚Ä¢ Calcul des probabilit√©s...",
        parse_mode='Markdown'
    )
    
    # Obtenir la pr√©diction avec les cotes
    prediction = predictor.predict_match(team1, team2, odds1, odds2)
    
    # Si la pr√©diction a √©chou√©
    if not prediction or "error" in prediction:
        await loading_message.edit_text(
            f"‚ùå Impossible de g√©n√©rer une pr√©diction:\n"
            f"{prediction.get('error', 'Erreur inconnue')}"
        )
        return
    
    # Formater et envoyer la pr√©diction
    prediction_text = format_prediction_message(prediction)
    
    # Ajouter un bouton "Nouvelle pr√©diction"
    keyboard = [
        [InlineKeyboardButton("üîÑ Nouvelle pr√©diction", callback_data="new_prediction")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await loading_message.edit_text(
        prediction_text, 
        parse_mode='Markdown',
        reply_markup=reply_markup
    )
    
    # Enregistrer la pr√©diction dans les logs
    user = update.message.from_user
    save_prediction_log(
        user_id=user.id,
        username=user.username,
        team1=team1,
        team2=team2,
        odds1=odds1,
        odds2=odds2,
        prediction_result=prediction
    )

# Fonction pour r√©agir aux messages non reconnus comme commandes
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """R√©pond aux messages qui ne sont pas des commandes."""
    message_text = update.message.text.strip()
    
    # Rechercher si le message ressemble √† une demande de pr√©diction
    if " vs " in message_text or " contre " in message_text:
        # V√©rifier d'abord l'abonnement au canal
        is_subscribed = await check_subscription(update, context)
        if not is_subscribed:
            return
            
        # Extraire les √©quipes
        teams = re.split(r'\s+(?:vs|contre|VS|CONTRE)\s+', message_text)
        
        if len(teams) == 2 and teams[0] and teams[1]:
            # Cr√©er des boutons pour confirmer la pr√©diction
            keyboard = [
                [InlineKeyboardButton("‚úÖ Pr√©dire ce match", callback_data=f"predict_{teams[0]}_{teams[1]}")],
                [InlineKeyboardButton("‚ùå Annuler", callback_data="cancel")]
            ]
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                f"üîÆ Souhaitez-vous obtenir une pr√©diction pour le match:\n\n"
                f"*{teams[0]} vs {teams[1]}*?",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            return
    
    # Message par d√©faut si aucune action n'est d√©clench√©e
    await update.message.reply_text(
        "üëã Bonjour! Je suis FIFA 4x4 Predictor Bot.\n\n"
        "Pour obtenir une pr√©diction, utilisez la commande /predict ou /odds.\n"
        "Pour voir toutes les commandes disponibles, tapez /help."
    )

# Gestion des clics sur les boutons
async def button_click(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """G√®re les clics sur les boutons inline."""
    query = update.callback_query
    await query.answer()
    
    # Annulation
    if query.data == "cancel":
        await query.edit_message_text("‚ùå Op√©ration annul√©e.")
        return
    
    # Nouvelle pr√©diction
    if query.data == "new_prediction":
        # V√©rifier d'abord l'abonnement au canal
        user_id = update.effective_user.id
        
        try:
            # V√©rifier si l'utilisateur est membre du canal
            chat_member = await context.bot.get_chat_member(chat_id="@alvecapital1", user_id=user_id)
            
            # Statuts indiquant que l'utilisateur est membre
            member_statuses = ['creator', 'administrator', 'member']
            
            if chat_member.status not in member_statuses:
                # L'utilisateur n'est pas abonn√©
                keyboard = [
                    [InlineKeyboardButton("üì£ Rejoindre le canal", url="https://t.me/alvecapital1")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await query.edit_message_text(
                    "‚ùå Vous n'√™tes plus abonn√© √† notre canal @alvecapital1.\n\n"
                    "L'abonnement est requis pour acc√©der aux pr√©dictions FIFA 4x4.\n"
                    "Rejoignez le canal puis r√©essayez.",
                    reply_markup=reply_markup
                )
                return
        except Exception as e:
            logger.error(f"Erreur lors de la v√©rification d'abonnement: {e}")
            # Continuer en cas d'erreur
        
        # Afficher le formulaire de nouvelle pr√©diction
        keyboard = [
            [InlineKeyboardButton("üè¥Û†ÅßÛ†Å¢Û†Å•Û†ÅÆÛ†ÅßÛ†Åø Premier League", callback_data="league_england")],
            [InlineKeyboardButton("üá™üá∏ La Liga", callback_data="league_spain")],
            [InlineKeyboardButton("üáÆüáπ Serie A", callback_data="league_italy")],
            [InlineKeyboardButton("üá´üá∑ Ligue 1", callback_data="league_france")],
            [InlineKeyboardButton("üá©üá™ Bundesliga", callback_data="league_germany")],
            [InlineKeyboardButton("üåç Autre √©quipe", callback_data="league_other")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üîÆ *NOUVELLE PR√âDICTION*\n\n"
            "S√©lectionnez une ligue pour voir les √©quipes disponibles, ou utilisez directement les commandes:\n\n"
            "‚Ä¢ `/predict √âquipe1 vs √âquipe2`\n"
            "‚Ä¢ `/odds √âquipe1 vs √âquipe2 cote1 cote2`",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        return
    
    # D√©marrer une pr√©diction
    if query.data == "start_prediction":
        # V√©rifier d'abord l'abonnement au canal
        user_id = update.effective_user.id
        
        try:
            # V√©rifier si l'utilisateur est membre du canal
            chat_member = await context.bot.get_chat_member(chat_id="@alvecapital1", user_id=user_id)
            
            # Statuts indiquant que l'utilisateur est membre
            member_statuses = ['creator', 'administrator', 'member']
            
            if chat_member.status not in member_statuses:
                # L'utilisateur n'est pas abonn√©
                keyboard = [
                    [InlineKeyboardButton("üì£ Rejoindre le canal", url="https://t.me/alvecapital1")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await query.edit_message_text(
                    "‚ùå Vous n'√™tes pas abonn√© √† notre canal @alvecapital1.\n\n"
                    "L'abonnement est requis pour acc√©der aux pr√©dictions FIFA 4x4.\n"
                    "Rejoignez le canal puis r√©essayez.",
                    reply_markup=reply_markup
                )
                return
        except Exception as e:
            logger.error(f"Erreur lors de la v√©rification d'abonnement: {e}")
            # Continuer en cas d'erreur
        
        # Afficher les instructions
        await query.edit_message_text(
            "üîÆ *PR√âDICTION FIFA 4x4*\n\n"
            "Pour obtenir une pr√©diction, utilisez l'une de ces commandes:\n\n"
            "‚Ä¢ `/predict √âquipe1 vs √âquipe2`\n"
            "  Exemple: `/predict Manchester United vs Chelsea`\n\n"
            "‚Ä¢ `/odds √âquipe1 vs √âquipe2 cote1 cote2`\n"
            "  Exemple: `/odds Liverpool vs Arsenal 1.85 4.2`\n\n"
            "Vous pouvez aussi simplement √©crire le nom des √©quipes s√©par√©es par 'vs'.",
            parse_mode='Markdown'
        )
        return
    
    # S√©lection de ligue
    if query.data.startswith("league_"):
        league = query.data.replace("league_", "")
        
        # Obtenir quelques √©quipes populaires de cette ligue
        teams = get_teams_by_league(league)
        
        keyboard = []
        for team in teams:
            keyboard.append([InlineKeyboardButton(team, callback_data=f"team1_{team}")])
        
        keyboard.append([InlineKeyboardButton("‚óÄÔ∏è Retour", callback_data="new_prediction")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            f"üîÆ *NOUVELLE PR√âDICTION* - S√©lection de l'√©quipe 1\n\n"
            f"Choisissez la premi√®re √©quipe:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        return
    
    # S√©lection de l'√©quipe 1
    if query.data.startswith("team1_"):
        team1 = query.data.replace("team1_", "")
        
        # Obtenir les √©quipes qui ont jou√© contre team1
        opposing_teams = get_opposing_teams(team1)
        
        keyboard = []
        for team in opposing_teams:
            keyboard.append([InlineKeyboardButton(team, callback_data=f"team2_{team1}_{team}")])
        
        keyboard.append([InlineKeyboardButton("‚óÄÔ∏è Retour", callback_data="new_prediction")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            f"üîÆ *NOUVELLE PR√âDICTION* - S√©lection de l'√©quipe 2\n\n"
            f"√âquipe 1: *{team1}*\n\n"
            f"Choisissez l'√©quipe adverse:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        return
    
    # S√©lection de l'√©quipe 2
    if query.data.startswith("team2_"):
        parts = query.data.replace("team2_", "").split("_", 1)
        if len(parts) == 2:
            team1 = parts[0]
            team2 = parts[1]
            
            keyboard = [
                [InlineKeyboardButton("‚úÖ Pr√©dire sans cotes", callback_data=f"predict_{team1}_{team2}")],
                [InlineKeyboardButton("üí∞ Ajouter des cotes", callback_data=f"odds_{team1}_{team2}")],
                [InlineKeyboardButton("‚óÄÔ∏è Retour", callback_data=f"team1_{team1}")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                f"üîÆ *NOUVELLE PR√âDICTION*\n\n"
                f"Match s√©lectionn√©: *{team1}* vs *{team2}*\n\n"
                f"Comment souhaitez-vous proc√©der?",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        return
    
    # Pr√©diction √† partir d'un bouton
    if query.data.startswith("predict_"):
        # V√©rifier d'abord l'abonnement au canal
        user_id = update.effective_user.id
        
        try:
            # V√©rifier si l'utilisateur est membre du canal
            chat_member = await context.bot.get_chat_member(chat_id="@alvecapital1", user_id=user_id)
            
            # Statuts indiquant que l'utilisateur est membre
            member_statuses = ['creator', 'administrator', 'member']
            
            if chat_member.status not in member_statuses:
                # L'utilisateur n'est pas abonn√©
                keyboard = [
                    [InlineKeyboardButton("üì£ Rejoindre le canal", url="https://t.me/alvecapital1")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await query.edit_message_text(
                    "‚ùå Vous n'√™tes pas abonn√© √† notre canal @alvecapital1.\n\n"
                    "L'abonnement est requis pour acc√©der aux pr√©dictions FIFA 4x4.\n"
                    "Rejoignez le canal puis r√©essayez.",
                    reply_markup=reply_markup
                )
                return
        except Exception as e:
            logger.error(f"Erreur lors de la v√©rification d'abonnement: {e}")
            # Continuer en cas d'erreur
            
        # Extraire les √©quipes du callback_data
        data_parts = query.data.split("_")
        if len(data_parts) >= 3:
            team1 = data_parts[1]
            team2 = "_".join(data_parts[2:])  # G√©rer les noms d'√©quipe avec des underscores
            
            # Afficher un message de chargement
            await query.edit_message_text(
                "‚è≥ *Analyse en cours*\n\n"
                "‚Ä¢ Chargement des donn√©es historiques...\n"
                "‚Ä¢ Analyse des confrontations directes...\n"
                "‚Ä¢ Calcul des probabilit√©s...",
                parse_mode='Markdown'
            )
            
            # Obtenir la pr√©diction
            prediction = predictor.predict_match(team1, team2)
            
            # Si la pr√©diction a √©chou√©
            if not prediction or "error" in prediction:
                await query.edit_message_text(
                    f"‚ùå Impossible de g√©n√©rer une pr√©diction:\n"
                    f"{prediction.get('error', 'Erreur inconnue')}"
                )
                return
            
            # Formater et envoyer la pr√©diction
            prediction_text = format_prediction_message(prediction)
            
            # Ajouter un bouton "Nouvelle pr√©diction"
            keyboard = [
                [InlineKeyboardButton("üîÑ Nouvelle pr√©diction", callback_data="new_prediction")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                prediction_text, 
                parse_mode='Markdown',
                reply_markup=reply_markup
            )
            
            # Enregistrer la pr√©diction dans les logs
            user = update.effective_user
            save_prediction_log(
                user_id=user.id,
                username=user.username,
                team1=team1,
                team2=team2,
                prediction_result=prediction
            )

    # Ajouter des cotes √† une pr√©diction
    if query.data.startswith("odds_"):
        parts = query.data.replace("odds_", "").split("_", 1)
        if len(parts) == 2:
            team1 = parts[0]
            team2 = parts[1]
            
            context.user_data['odds_teams'] = (team1, team2)
            
            await query.edit_message_text(
                f"üí∞ *AJOUT DES COTES*\n\n"
                f"Match: *{team1}* vs *{team2}*\n\n"
                f"Veuillez envoyer les cotes au format suivant:\n"
                f"`cote1 cote2`\n\n"
                f"Exemple: `1.85 3.5`",
                parse_mode='Markdown'
            )
            
            return ODDS_INPUT
        return

# Fonction pour obtenir les √©quipes par ligue
def get_teams_by_league(league: str) -> List[str]:
    """Retourne une liste d'√©quipes populaires de la ligue sp√©cifi√©e."""
    teams_by_league = {
        "england": ["Arsenal", "Manchester United", "Liverpool", "Chelsea", "Manchester City", "Tottenham"],
        "spain": ["Barcelona", "Real Madrid", "Atletico Madrid", "Sevilla", "Valencia", "Villarreal"],
        "italy": ["Juventus", "Inter Milan", "AC Milan", "Napoli", "AS Roma", "Lazio"],
        "france": ["PSG", "Marseille", "Lyon", "Monaco", "Lille", "Nice"],
        "germany": ["Bayern Munich", "Borussia Dortmund", "RB Leipzig", "Bayer Leverkusen", "Schalke 04", "Wolfsburg"],
        "other": ["Ajax", "Porto", "Benfica", "Sporting CP", "Galatasaray", "Celtic", "Rangers"]
    }
    
    return teams_by_league.get(league, ["√âquipe non trouv√©e"])

# Fonction pour obtenir les √©quipes adverses
def get_opposing_teams(team: str) -> List[str]:
    """Retourne une liste d'√©quipes qui ont jou√© contre l'√©quipe sp√©cifi√©e."""
    # Dans une impl√©mentation r√©elle, vous r√©cup√©reriez ces donn√©es de votre base de donn√©es
    # Pour cette d√©mo, on utilise une liste g√©n√©r√©e
    all_teams = get_all_teams()
    
    # Filtrer pour ne pas inclure l'√©quipe elle-m√™me
    return [t for t in all_teams if t != team][:10]  # Limiter √† 10 √©quipes pour l'interface

# Fonction pour lister les √©quipes disponibles
async def teams_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Affiche la liste des √©quipes disponibles dans la base de donn√©es."""
    # V√©rifier d'abord l'abonnement au canal
    is_subscribed = await check_subscription(update, context)
    if not is_subscribed:
        return
        
    # R√©cup√©rer la liste des √©quipes
    # R√©cup√©rer la liste des √©quipes
    teams = get_all_teams()
    
    if not teams:
        await update.message.reply_text("Aucune √©quipe n'a √©t√© trouv√©e dans la base de donn√©es.")
        return
    
    # Formater la liste des √©quipes
    teams_text = "üìã *√âQUIPES DISPONIBLES:*\n\n"
    
    # Grouper les √©quipes par lettre alphab√©tique
    teams_by_letter = {}
    for team in teams:
        first_letter = team[0].upper()
        if first_letter not in teams_by_letter:
            teams_by_letter[first_letter] = []
        teams_by_letter[first_letter].append(team)
    
    # Ajouter chaque groupe d'√©quipes
    for letter in sorted(teams_by_letter.keys()):
        teams_text += f"*{letter}*\n"
        for team in sorted(teams_by_letter[letter]):
            teams_text += f"‚Ä¢ {team}\n"
        teams_text += "\n"
    
    # Si le message est trop long, diviser en plusieurs messages
    if len(teams_text) > 4000:
        chunks = [teams_text[i:i+4000] for i in range(0, len(teams_text), 4000)]
        for chunk in chunks:
            await update.message.reply_text(chunk, parse_mode='Markdown')
    else:
        await update.message.reply_text(teams_text, parse_mode='Markdown')

async def setup_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Affiche les informations pour mettre en place le bot."""
    setup_text = """
üîß *Configuration du bot FIFA 4x4 Predictor*

Ce bot utilise une base de donn√©es de matchs FIFA 4x4 pour g√©n√©rer des pr√©dictions pr√©cises.

*Fichiers n√©cessaires:*
- `google_credentials.json` - Pour acc√©der √† votre Google Sheets
- `config.py` - Configuration du bot avec les tokens et param√®tres

*Installation:*
1. Assurez-vous que Python 3.7+ est install√©
2. Installez les d√©pendances: `pip install -r requirements.txt`
3. Lancez le bot: `python fifa_bot.py`

*H√©bergement:*
Pour un fonctionnement continu, h√©bergez sur un serveur comme:
- Heroku
- PythonAnywhere
- VPS personnel

*Pour plus d'informations, contactez l'administrateur du bot.*
"""
    await update.message.reply_text(setup_text, parse_mode='Markdown')

# Gestionnaire pour les entr√©es de cotes
async def odds_input_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Traite les entr√©es de cotes apr√®s avoir s√©lectionn√© les √©quipes."""
    try:
        # R√©cup√©rer les √©quipes stock√©es dans user_data
        team1, team2 = context.user_data.get('odds_teams', (None, None))
        
        if not team1 or not team2:
            await update.message.reply_text(
                "‚ùå Erreur: √©quipes non sp√©cifi√©es. Veuillez recommencer."
            )
            return ConversationHandler.END
        
        # R√©cup√©rer les cotes du message
        odds_text = update.message.text.strip()
        odds_parts = re.findall(r'(\d+\.?\d*)', odds_text)
        
        if len(odds_parts) < 2:
            await update.message.reply_text(
                "‚ùå Format incorrect. Veuillez envoyer deux nombres s√©par√©s par un espace.\n"
                "Exemple: `1.85 3.5`",
                parse_mode='Markdown'
            )
            return ODDS_INPUT
        
        odds1 = float(odds_parts[0])
        odds2 = float(odds_parts[1])
        
        # V√©rifier que les cotes sont valides
        if odds1 < 1.01 or odds2 < 1.01:
            await update.message.reply_text(
                "‚ùå Les cotes doivent √™tre sup√©rieures √† 1.01. Veuillez r√©essayer."
            )
            return ODDS_INPUT
        
        # Afficher un message de chargement
        loading_message = await update.message.reply_text(
            "‚è≥ *Analyse en cours*\n\n"
            "‚Ä¢ Chargement des donn√©es historiques...\n"
            "‚Ä¢ Analyse des confrontations directes...\n"
            "‚Ä¢ Int√©gration des cotes bookmakers...\n"
            "‚Ä¢ Calcul des probabilit√©s...",
            parse_mode='Markdown'
        )
        
        # Obtenir la pr√©diction
        prediction = predictor.predict_match(team1, team2, odds1, odds2)
        
        # Si la pr√©diction a √©chou√©
        if not prediction or "error" in prediction:
            await loading_message.edit_text(
                f"‚ùå Impossible de g√©n√©rer une pr√©diction:\n"
                f"{prediction.get('error', 'Erreur inconnue')}"
            )
            return ConversationHandler.END
        
        # Formater et envoyer la pr√©diction
        prediction_text = format_prediction_message(prediction)
        
        # Ajouter un bouton "Nouvelle pr√©diction"
        keyboard = [
            [InlineKeyboardButton("üîÑ Nouvelle pr√©diction", callback_data="new_prediction")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await loading_message.edit_text(
            prediction_text, 
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
        
        # Enregistrer la pr√©diction dans les logs
        user = update.message.from_user
        save_prediction_log(
            user_id=user.id,
            username=user.username,
            team1=team1,
            team2=team2,
            odds1=odds1,
            odds2=odds2,
            prediction_result=prediction
        )
        
        # Effacer les donn√©es temporaires
        if 'odds_teams' in context.user_data:
            del context.user_data['odds_teams']
        
        return ConversationHandler.END
    
    except Exception as e:
        logger.error(f"Erreur lors du traitement des cotes: {e}")
        await update.message.reply_text(
            "‚ùå Une erreur s'est produite. Veuillez r√©essayer avec le format: `1.85 3.5`",
            parse_mode='Markdown'
        )
        return ODDS_INPUT

# Fonction pour annuler la conversation
async def cancel_odds(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Annule la conversation et efface les donn√©es temporaires."""
    # Effacer les donn√©es temporaires
    if 'odds_teams' in context.user_data:
        del context.user_data['odds_teams']
    
    await update.message.reply_text(
        "‚ùå Op√©ration annul√©e. Vous pouvez commencer une nouvelle pr√©diction."
    )
    
    return ConversationHandler.END

# R√©initialiser le webhook Telegram au d√©marrage
def reset_telegram_session():
    """R√©initialise la session Telegram du bot"""
    import requests
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/deleteWebhook?drop_pending_updates=true"
    try:
        response = requests.get(url)
        if response.status_code == 200:
            logger.info("Webhook Telegram r√©initialis√© avec succ√®s")
            return True
        else:
            logger.warning(f"√âchec de r√©initialisation du webhook: {response.text}")
            return False
    except Exception as e:
        logger.error(f"Erreur lors de la r√©initialisation du webhook: {e}")
        return False

# Fonction principale
def main() -> None:
    """D√©marre le bot."""
    try:
        # R√©initialiser d'abord la session Telegram
        reset_telegram_session()
        
        # Cr√©er l'application
        application = Application.builder().token(TELEGRAM_TOKEN).build()

        # Cr√©ation du conversation handler pour les cotes
        conv_handler = ConversationHandler(
            entry_points=[CallbackQueryHandler(button_click, pattern=r'^odds_')],
            states={
                ODDS_INPUT: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, odds_input_handler)
                ],
            },
            fallbacks=[CommandHandler("cancel", cancel_odds)],
            per_message=False
        )

        # Ajouter les gestionnaires de commandes
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(CommandHandler("predict", predict_command))
        application.add_handler(CommandHandler("odds", odds_command))
        application.add_handler(CommandHandler("teams", teams_command))
        application.add_handler(CommandHandler("setup", setup_command))
        application.add_handler(CommandHandler("webapp", webapp_command))
        application.add_handler(CommandHandler("check", check_subscription_command))
        
        # Ajouter le gestionnaire de conversation pour les cotes
        application.add_handler(conv_handler)
        
        # Ajouter le gestionnaire pour les clics sur les boutons (qui ne sont pas g√©r√©s par le conv_handler)
        application.add_handler(CallbackQueryHandler(button_click))
        
        # Ajouter le gestionnaire pour les messages normaux
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        
        # Ajouter le gestionnaire d'erreurs
        application.add_error_handler(error_handler)

        # D√©marrer le bot
        logger.info(f"Bot d√©marr√© avec le token: {TELEGRAM_TOKEN[:5]}...")
        application.run_polling(allowed_updates=Update.ALL_TYPES)
        
    except Exception as e:
        logger.critical(f"ERREUR CRITIQUE lors du d√©marrage du bot: {e}")
        import traceback
        logger.critical(traceback.format_exc())

if __name__ == '__main__':
    main()
