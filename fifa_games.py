import logging
import asyncio
import sys
from typing import Optional, Dict, Any, List
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ConversationHandler,
    filters,
    ContextTypes
)

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Importation des configurations
from config import TELEGRAM_TOKEN, WELCOME_MESSAGE

# Imports pour la v√©rification admin
from admin_access import is_admin

# Imports pour les syst√®mes optimis√©s
from cache_system import start_cache_monitoring
from queue_manager import start_queue_manager, stop_queue_manager
from predictor import preload_prediction_data

# Imports pour les v√©rifications
from verification import (
    verify_subscription, verify_referral, send_subscription_required, 
    send_referral_required, verify_all_requirements, show_games_menu
)

# Imports pour le syst√®me de parrainage
from referral_system import (
    register_user, generate_referral_link,
    count_referrals, get_referred_users, get_max_referrals, get_referral_instructions
)

# Import depuis l'adaptateur de base de donn√©es
from database_adapter import get_all_teams, save_prediction_log

# Import des modules de jeux sp√©cifiques
from games.apple_game import start_apple_game, handle_apple_callback
from games.baccarat_game import start_baccarat_game, handle_baccarat_callback, handle_baccarat_tour_input
from games.fifa_game import handle_fifa_callback

# √âtats de conversation pour les jeux
BACCARAT_INPUT = 1
ODDS_INPUT = 2

# Variable pour suivre l'initialisation
_is_system_initialized = False

async def initialize_system():
    """
    Initialise tous les syst√®mes optimis√©s :
    1. D√©marre le gestionnaire de file d'attente
    2. Pr√©charge les donn√©es de pr√©diction
    3. D√©marre la surveillance du cache
    """
    global _is_system_initialized
    
    if _is_system_initialized:
        logger.info("Syst√®me d√©j√† initialis√©")
        return
    
    logger.info("Initialisation du syst√®me optimis√©...")
    
    # D√©marrer le gestionnaire de file d'attente
    logger.info("D√©marrage du gestionnaire de file d'attente...")
    await start_queue_manager()
    
    # Pr√©charger les donn√©es de pr√©diction
    logger.info("Pr√©chargement des donn√©es de pr√©diction...")
    preload_task = asyncio.create_task(preload_prediction_data())
    
    # D√©marrer la surveillance du cache
    logger.info("D√©marrage de la surveillance du cache...")
    cache_task = asyncio.create_task(start_cache_monitoring())
    
    # Attendre la fin du pr√©chargement des donn√©es avec timeout
    try:
        await asyncio.wait_for(preload_task, timeout=30.0)
        logger.info("Pr√©chargement des donn√©es de pr√©diction termin√© avec succ√®s")
    except asyncio.TimeoutError:
        logger.warning("Le pr√©chargement des donn√©es de pr√©diction prend plus de temps que pr√©vu, "
                      "l'application continuera √† fonctionner mais avec des performances r√©duites initialement")
    
    _is_system_initialized = True
    logger.info("Syst√®me optimis√© initialis√© avec succ√®s")

async def shutdown_system():
    """
    Arr√™te proprement tous les syst√®mes optimis√©s.
    """
    global _is_system_initialized
    
    if not _is_system_initialized:
        return
    
    logger.info("Arr√™t du syst√®me optimis√©...")
    
    # Arr√™ter le gestionnaire de file d'attente
    await stop_queue_manager()
    
    # Les autres t√¢ches s'arr√™teront automatiquement √† la fermeture de l'application
    _is_system_initialized = False
    
    logger.info("Syst√®me optimis√© arr√™t√© avec succ√®s")

# Fonction principale pour le jeu FIFA 4x4
async def start_fifa_game(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Lance le jeu FIFA 4x4 Predictor."""
    query = update.callback_query
    
    # Message introductif
    intro_text = (
        "üèÜ *FIFA 4x4 PREDICTOR* üèÜ\n\n"
        "Obtenez des pr√©dictions pr√©cises bas√©es sur des statistiques r√©elles de matchs FIFA 4x4.\n\n"
        "Pour commencer, s√©lectionnez les √©quipes qui s'affrontent et indiquez les cotes actuelles."
    )
    
    # Bouton pour lancer la s√©lection d'√©quipes
    keyboard = [
        [InlineKeyboardButton("üëâ S√©lectionner les √©quipes", callback_data="fifa_select_teams")],
        [InlineKeyboardButton("üéÆ Retour au menu", callback_data="show_games")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # √âditer le message pour afficher l'introduction du jeu
    await query.edit_message_text(
        intro_text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

# Gestionnaire des callbacks sp√©cifiques au bot
async def handle_game_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """G√®re la s√©lection d'un jeu depuis le menu principal."""
    query = update.callback_query
    user_id = query.from_user.id
    username = query.from_user.username
    data = query.data
    
    # Log pour le debugging
    logger.info(f"S√©lection de jeu: {data} par utilisateur {username} (ID: {user_id})")
    
    # V√©rifier l'acc√®s utilisateur (sauf pour les admin)
    admin_status = is_admin(user_id, username)
    if not admin_status:
        has_access = await verify_all_requirements(user_id, username, query.message, context)
        if not has_access:
            return
    
    await query.answer()  # R√©pondre au callback query
    
    if data == "game_fifa":
        # Lancer le jeu FIFA
        await start_fifa_game(update, context)
    elif data == "game_apple":
        # Lancer le jeu Apple of Fortune
        await start_apple_game(update, context)
    elif data == "game_baccarat":
        # Lancer le jeu Baccarat
        await start_baccarat_game(update, context)
    elif data == "show_games":
        # Afficher le menu des jeux
        await show_games_menu(query.message, context)
    else:
        # Commande inconnue, retour au menu
        await show_games_menu(query.message, context)

# Gestionnaire principal des callbacks
async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """G√®re tous les callbacks de boutons"""
    query = update.callback_query
    data = query.data
    user_id = query.from_user.id
    username = query.from_user.username
    
    # Stocker les informations utilisateur dans le contexte
    context.user_data["user_id"] = user_id
    context.user_data["username"] = username
    
    # Log pour debugging avec plus de d√©tails
    logger.info(f"Callback principal re√ßu: '{data}' de l'utilisateur {username} (ID: {user_id})")
    
    # Traiter explicitement les callbacks de s√©lection d'√©quipe
    if data.startswith("select_team1_") or data.startswith("select_team2_"):
        await handle_fifa_callback(update, context)
        return
    
    # G√©rer explicitement les callbacks de pagination
    if data.startswith("fifa_page_") or data.startswith("teams_page_"):
        # Extraire le num√©ro de page
        try:
            if data.startswith("fifa_page_"):
                page = int(data.split("_")[2])
            else:
                page = int(data.split("_")[2])
                
            is_team1 = context.user_data.get("selecting_team1", True)
            
            # S'assurer que les non-admins ont acc√®s
            admin_status = is_admin(user_id, username)
            if not admin_status:
                has_access = await verify_all_requirements(user_id, username, query.message, context)
                if not has_access:
                    return
                    
            await query.answer()  # R√©pondre au callback
            
            # Importer les fonctions n√©cessaires dynamiquement pour √©viter les importations circulaires
            from games.fifa_game import show_teams_page
            
            # Afficher rapidement la page suivante sans d√©lai
            await show_teams_page(query.message, context, page, edit=True, is_team1=is_team1)
            return
        except Exception as e:
            logger.error(f"Erreur lors du traitement de la pagination: {e}")
            import traceback
            logger.error(traceback.format_exc())
            await query.answer("Erreur lors du changement de page")
            return
    
    # Traiter les diff√©rents types de callbacks
    if data == "show_games":
        # Afficher le menu des jeux
        await show_games_menu(query.message, context)
    elif data.startswith("game_"):
        # Callbacks pour s√©lection de jeu
        await handle_game_selection(update, context)
    elif data.startswith("fifa_"):
        # Callbacks sp√©cifiques au jeu FIFA
        await handle_fifa_callback(update, context)
    elif data.startswith("apple_"):
        # Callbacks sp√©cifiques au jeu Apple of Fortune
        await handle_apple_callback(update, context)
    elif data.startswith("baccarat_"):
        # Callbacks sp√©cifiques au jeu Baccarat
        await handle_baccarat_callback(update, context)
    elif data == "verify_subscription":
        # V√©rification d'abonnement
        await verify_subscription(query.message, user_id, username, context, edit=True)
    elif data == "verify_referral":
        # V√©rification de parrainage
        await verify_referral(query.message, user_id, username, context, edit=True)
    elif data == "get_referral_link":
        # G√©n√©rer et afficher un lien de parrainage
        bot_info = await context.bot.get_me()
        bot_username = bot_info.username
        referral_link = await generate_referral_link(user_id, bot_username)
        
        # Obtenir le nombre actuel de parrainages
        referral_count = await count_referrals(user_id)
        max_referrals = await get_max_referrals()
        
        # Cr√©er les boutons
        keyboard = [
            [InlineKeyboardButton("üîó Copier le lien", callback_data="copy_referral_link")],
            [InlineKeyboardButton("‚úÖ V√©rifier mon parrainage", callback_data="verify_referral")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # Message avec les instructions de parrainage
        message_text = f"üîó *Votre lien de parrainage:*\n\n`{referral_link}`\n\n"
        message_text += f"_Progression: {referral_count}/{max_referrals} parrainage(s)_\n\n"
        message_text += get_referral_instructions()
        
        await query.edit_message_text(
            message_text,
            parse_mode='Markdown',
            reply_markup=reply_markup,
            disable_web_page_preview=True
        )
    elif data == "copy_referral_link":
        # Telegram g√®re automatiquement la copie
        await query.answer("Lien copi√© dans le presse-papier!")
    else:
        # Commande inconnue
        logger.warning(f"Callback non reconnu: {data}")
        await query.answer("Action non reconnue")

# Gestionnaire des messages pour les diff√©rents jeux
async def handle_game_messages(update: Update, context: ContextTypes.DEFAULT_TYPE) -> Optional[int]:
    """Traite les messages sp√©cifiques aux jeux."""
    # Stocker les informations utilisateur dans le contexte
    user_id = update.effective_user.id
    username = update.effective_user.username
    context.user_data["user_id"] = user_id
    context.user_data["username"] = username
    
    # V√©rifier le statut admin
    admin_status = is_admin(user_id, username)
    if admin_status:
        logger.info(f"Message re√ßu de l'administrateur {username} (ID: {user_id})")
    
    # V√©rifier si c'est un message pour Baccarat (tour #)
    if context.user_data.get("awaiting_baccarat_tour", False):
        return await handle_baccarat_tour_input(update, context)
    
    # V√©rifier si c'est un message pour FIFA (cotes √©quipe 1)
    if context.user_data.get("awaiting_odds_team1", False):
        from games.fifa_game import handle_odds_team1_input
        return await handle_odds_team1_input(update, context)
    
    # V√©rifier si c'est un message pour FIFA (cotes √©quipe 2)
    if context.user_data.get("awaiting_odds_team2", False):
        from games.fifa_game import handle_odds_team2_input
        return await handle_odds_team2_input(update, context)
    
    # Sinon, traiter comme un message normal
    message_text = update.message.text.strip()
    
    # Rechercher si le message ressemble √† une demande de pr√©diction
    if " vs " in message_text or " contre " in message_text:
        # V√©rifier si l'utilisateur a acc√®s (admin ou abonnement+parrainage)
        if not admin_status:
            has_access = await verify_all_requirements(user_id, username, update.message, context)
            if not has_access:
                return
        
        # Informer l'utilisateur d'utiliser la m√©thode interactive
        keyboard = [
            [InlineKeyboardButton("üîÆ Faire une pr√©diction", callback_data="fifa_select_teams")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "‚ÑπÔ∏è *Nouvelle m√©thode de pr√©diction*\n\n"
            "Pour une exp√©rience am√©lior√©e, veuillez utiliser notre syst√®me interactif de pr√©diction.\n\n"
            "Cliquez sur le bouton ci-dessous pour commencer une pr√©diction guid√©e avec s√©lection d'√©quipes et cotes obligatoires.",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        return
    
    # Message par d√©faut si aucune action n'est d√©clench√©e
    await update.message.reply_text(
        "Je ne comprends pas cette commande. Utilisez /help pour voir les commandes disponibles."
    )

# Commande pour afficher le menu des jeux
async def games_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Affiche le menu des jeux."""
    user_id = update.effective_user.id
    username = update.effective_user.username
    
    # Pour tout le monde, afficher directement le menu des jeux
    await show_games_menu(update.message, context)

# Commande d'aide
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Affiche l'aide lorsque l'utilisateur utilise la commande /help."""
    # R√©cup√©rer les infos utilisateur
    user_id = update.effective_user.id
    username = update.effective_user.username
    context.user_data["user_id"] = user_id
    context.user_data["username"] = username
    
    # V√©rifier si c'est un admin
    if is_admin(user_id, username):
        help_text = "*üîÆ FIFA 4x4 PREDICTOR - Aide (Admin)*\n\n"
        help_text += "*Commandes disponibles:*\n"
        help_text += "‚Ä¢ `/start` - D√©marrer le bot\n"
        help_text += "‚Ä¢ `/help` - Afficher ce message d'aide\n"
        help_text += "‚Ä¢ `/games` - Menu des jeux disponibles\n"
        help_text += "‚Ä¢ `/check` - V√©rifier l'√©tat du syst√®me\n"
        
        await update.message.reply_text(
            help_text,
            parse_mode='Markdown'
        )
        return
    
    # V√©rifier si l'utilisateur a acc√®s
    has_access = await verify_all_requirements(user_id, username, update.message, context)
    if not has_access:
        return
    
    # Afficher le message d'aide standard
    help_text = "*üîÆ FIFA 4x4 PREDICTOR - Aide*\n\n"
    help_text += "*Commandes disponibles:*\n"
    help_text += "‚Ä¢ `/start` - D√©marrer le bot\n"
    help_text += "‚Ä¢ `/help` - Afficher ce message d'aide\n"
    help_text += "‚Ä¢ `/games` - Menu des jeux disponibles\n"
    help_text += "‚Ä¢ `/check` - V√©rifier votre abonnement\n"
    help_text += "‚Ä¢ `/referral` - G√©rer vos parrainages\n\n"
    help_text += "*Note:* Les cotes sont obligatoires pour obtenir des pr√©dictions pr√©cises."
    
    await update.message.reply_text(
        help_text,
        parse_mode='Markdown'
    )

# Commande pour la gestion des parrainages
async def referral_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """G√®re les informations et statistiques de parrainage."""
    user_id = update.effective_user.id
    username = update.effective_user.username
    context.user_data["user_id"] = user_id
    context.user_data["username"] = username
    
    # V√©rifier l'abonnement
    is_subscribed = await verify_subscription(update.message, user_id, username, context=None, edit=False)
    if not is_subscribed and not is_admin(user_id, username):
        return
    
    # S'assurer que l'utilisateur est enregistr√©
    await register_user(user_id, username)
    
    # Obtenir les statistiques de parrainage
    referral_count = await count_referrals(user_id)
    max_referrals = await get_max_referrals()
    has_completed = referral_count >= max_referrals
    referred_users = await get_referred_users(user_id)
    
    # G√©n√©rer un lien de parrainage
    bot_info = await context.bot.get_me()
    bot_username = bot_info.username
    referral_link = await generate_referral_link(user_id, bot_username)
    
    # Cr√©er le message
    message_text = "üë• *Syst√®me de Parrainage FIFA 4x4 Predictor*\n\n"
    
    if has_completed:
        message_text += "‚úÖ *Statut: Parrainage compl√©t√©*\n"
        message_text += f"Vous avez parrain√© {referral_count}/{max_referrals} personne(s) requise(s).\n"
        message_text += "Toutes les fonctionnalit√©s sont d√©bloqu√©es!\n\n"
    else:
        message_text += "‚è≥ *Statut: Parrainage en cours*\n"
        message_text += f"Progression: {referral_count}/{max_referrals} personne(s) parrain√©e(s).\n"
        message_text += f"Parrainez encore {max_referrals - referral_count} personne(s) pour d√©bloquer toutes les fonctionnalit√©s.\n\n"
    
    message_text += "*Votre lien de parrainage:*\n"
    message_text += f"`{referral_link}`\n\n"
    
    # Utiliser une version simplifi√©e des instructions de parrainage
    message_text += "__Conditions de parrainage:__\n" 
    message_text += "‚Ä¢ L'invit√© doit cliquer sur votre lien\n"
    message_text += "‚Ä¢ L'invit√© doit s'abonner au canal\n"
    message_text += "‚Ä¢ L'invit√© doit d√©marrer le bot\n\n"
    
    # Ajouter la liste des utilisateurs parrain√©s
    if referred_users:
        message_text += "\n*Utilisateurs que vous avez parrain√©s:*\n"
        for user in referred_users:
            user_username = user.get('username', 'Inconnu')
            is_verified = "‚úÖ" if user.get('is_verified', False) else "‚è≥"
            message_text += f"‚Ä¢ {is_verified} {user_username}\n"
    
    # Cr√©er les boutons
    buttons = [
        [InlineKeyboardButton("üîó Copier le lien", callback_data="copy_referral_link")]
    ]
    
    if not has_completed:
        buttons.append([InlineKeyboardButton("‚úÖ V√©rifier mon parrainage", callback_data="verify_referral")])
    
    reply_markup = InlineKeyboardMarkup(buttons)
    
    await update.message.reply_text(
        message_text,
        parse_mode='Markdown',
        reply_markup=reply_markup,
        disable_web_page_preview=True
    )

# Commande pour v√©rifier l'abonnement
async def check_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """V√©rifie l'abonnement au canal."""
    user_id = update.effective_user.id
    username = update.effective_user.username
    
    await verify_subscription(update.message, user_id, username, context)

# Gestionnaire d'erreurs
async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """G√®re les erreurs."""
    logger.error(f"Une erreur est survenue: {context.error}")
    
    if update and update.effective_message:
        try:
            await update.effective_message.reply_text(
                "D√©sol√©, une erreur s'est produite. Veuillez r√©essayer ou contacter l'administrateur."
            )
        except Exception as e:
            logger.error(f"Erreur lors de l'envoi du message d'erreur: {e}")

# Point d'entr√©e pour la commande /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """G√®re la commande /start."""
    # Sauvegarder l'ID utilisateur dans le contexte
    user_id = update.effective_user.id
    username = update.effective_user.username
    context.user_data["user_id"] = user_id
    context.user_data["username"] = username
    
    # V√©rifier si c'est un admin
    if is_admin(user_id, username):
        logger.info(f"Commande /start par l'administrateur {username} (ID: {user_id})")
        
        # Cr√©e un bouton direct pour chaque jeu
        keyboard = [
            [InlineKeyboardButton("üèÜ FIFA 4x4 Predictor", callback_data="game_fifa")],
            [InlineKeyboardButton("üçé Apple of Fortune", callback_data="game_apple")],
            [InlineKeyboardButton("üÉè Baccarat", callback_data="game_baccarat")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "üîë *Acc√®s administrateur*\n\n"
            "S√©lectionnez directement un jeu:",
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
        return
        
    # Envoyer un message rapide pour confirmer la r√©ception
    message = await update.message.reply_text(
        f"üëã *Bienvenue {username} sur FIFA 4x4 Predictor!*\n\n"
        "Je suis en train d'activer votre compte...",
        parse_mode='Markdown'
    )
    
    # V√©rifier si l'utilisateur vient d'un lien de parrainage
    referrer_id = None
    if context.args and len(context.args) > 0 and context.args[0].startswith('ref'):
        try:
            referrer_id = int(context.args[0][3:])  # Extraire l'ID du parrain
            logger.info(f"User {user_id} came from referral link of user {referrer_id}")
        except (ValueError, IndexError):
            referrer_id = None
    
    # Enregistrer l'utilisateur sans attendre le r√©sultat
    asyncio.create_task(register_user(user_id, username, referrer_id))
    
    # Message de bienvenue complet avec boutons
    welcome_text = f"‚úÖ *Compte activ√©!*\n\n"
    welcome_text += "üèÜ Bienvenue sur *FIFA 4x4 Predictor*!\n\n"
    welcome_text += "‚ö†Ô∏è Pour utiliser toutes les fonctionnalit√©s, vous devez √™tre abonn√© "
    welcome_text += f"√† notre canal [AL VE CAPITAL](https://t.me/alvecapitalofficiel)."
    
    # V√©rifier si l'utilisateur a d√©j√† compl√©t√© son quota de parrainages
    has_completed = False
    try:
        referral_count = await count_referrals(user_id)
        max_referrals = await get_max_referrals()
        has_completed = referral_count >= max_referrals
    except Exception as e:
        logger.error(f"Erreur lors de la v√©rification du parrainage: {e}")
    
    # Cr√©er les boutons
    buttons = [
        [InlineKeyboardButton("üîç V√©rifier mon abonnement", callback_data="verify_subscription")]
    ]
    
    # Ajouter un bouton pour obtenir le lien de parrainage si n√©cessaire
    if not has_completed and not is_admin(user_id, username):
        buttons.append([InlineKeyboardButton("üîó Obtenir mon lien de parrainage", callback_data="get_referral_link")])
    
    reply_markup = InlineKeyboardMarkup(buttons)
    
    # Mettre √† jour le message pr√©c√©dent avec les informations compl√®tes
    try:
        await message.edit_text(
            welcome_text,
            parse_mode='Markdown',
            reply_markup=reply_markup,
            disable_web_page_preview=True
        )
    except Exception as e:
        logger.error(f"Erreur lors de la mise √† jour du message de bienvenue: {e}")
        # En cas d'erreur, envoyer un nouveau message
        await update.message.reply_text(
            welcome_text,
            parse_mode='Markdown',
            reply_markup=reply_markup,
            disable_web_page_preview=True
        )

# Fonction principale pour d√©marrer le bot
async def run_bot():
    """D√©marre le bot Telegram."""
    try:
        # Initialiser les syst√®mes optimis√©s
        await initialize_system()
        
        # Cr√©er l'application
        application = Application.builder().token(TELEGRAM_TOKEN).build()

        # Ajouter les gestionnaires de commandes
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(CommandHandler("games", games_command))
        application.add_handler(CommandHandler("check", check_command))
        application.add_handler(CommandHandler("referral", referral_command))
        
        # Gestionnaire de conversation pour les entr√©es sp√©cifiques aux jeux
        conv_handler = ConversationHandler(
            entry_points=[MessageHandler(filters.TEXT & ~filters.COMMAND, handle_game_messages)],
            states={
                ODDS_INPUT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_game_messages)],
                BACCARAT_INPUT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_game_messages)]
            },
            fallbacks=[CommandHandler("cancel", lambda u, c: ConversationHandler.END)]
        )
        application.add_handler(conv_handler)
        
        # Gestionnaire pour tous les callbacks
        application.add_handler(CallbackQueryHandler(button_callback))
        
        # Ajouter le gestionnaire pour les messages normaux non g√©r√©s par la conversation
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_game_messages))
        
        # Ajouter le gestionnaire d'erreurs
        application.add_error_handler(error_handler)

        # D√©marrer le bot
        logger.info(f"Bot d√©marr√© avec le token: {TELEGRAM_TOKEN[:5]}...")
        await application.initialize()
        await application.start()
        await application.updater.start_polling()
        
        # Signaler le succ√®s de d√©marrage
        logger.info("Bot FIFA 4x4 Predictor enti√®rement d√©marr√© et pr√™t √† recevoir des commandes.")
        
        # Maintenir le bot en ex√©cution
        while True:
            await asyncio.sleep(1)
            
    except KeyboardInterrupt:
        logger.info("Arr√™t du bot par l'utilisateur...")
    except Exception as e:
        logger.critical(f"ERREUR CRITIQUE lors du d√©marrage du bot: {e}")
        import traceback
        logger.critical(traceback.format_exc())
        # Continuation du code de fifa_games.py

    finally:
        # Arr√™ter le bot proprement
        logger.info("Arr√™t du bot...")
        
        # Arr√™ter les syst√®mes optimis√©s
        try:
            await shutdown_system()
        except Exception as e:
            logger.error(f"Erreur lors de l'arr√™t du syst√®me: {e}")
            
        # Arr√™ter l'application
        try:
            if 'application' in locals():
                await application.stop()
                await application.shutdown()
        except Exception as e:
            logger.error(f"Erreur lors de l'arr√™t de l'application: {e}")

# Fonction principale
def main() -> None:
    """D√©marre le bot."""
    try:
        # Configurer asyncio pour mieux g√©rer les erreurs
        import asyncio
        
        # Pour Python 3.10 et plus, on peut ajouter un meilleur d√©bogage
        try:
            asyncio.get_event_loop().set_debug(True)
        except:
            pass
        
        # R√©initialiser les webhooks Telegram avant le d√©marrage
        try:
            import requests
            from config import TELEGRAM_TOKEN
            
            # URL pour supprimer le webhook et les mises √† jour en attente
            url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/deleteWebhook?drop_pending_updates=true"
            
            # Faire la requ√™te
            response = requests.get(url)
            if response.status_code == 200:
                logger.info("‚úÖ R√©initialisation des webhooks Telegram r√©ussie!")
            else:
                logger.warning(f"‚ö†Ô∏è Erreur lors de la r√©initialisation des webhooks: {response.text}")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erreur lors de la r√©initialisation des webhooks: {e}")
        
        # Lancer le bot dans une boucle asyncio
        asyncio.run(run_bot())
        
    except KeyboardInterrupt:
        logger.info("Bot arr√™t√© par l'utilisateur.")
    except Exception as e:
        logger.critical(f"ERREUR CRITIQUE lors du d√©marrage du bot: {e}")
        import traceback
        logger.critical(traceback.format_exc())
        # Assurer un code de sortie non-z√©ro en cas d'erreur
        import sys
        sys.exit(1)

if __name__ == '__main__':
    main()
