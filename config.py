import os
import json
import tempfile
from pathlib import Path
import logging

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Chargement des variables d'environnement
def get_env_variable(name, default=None):
    """R√©cup√®re une variable d'environnement ou renvoie la valeur par d√©faut"""
    return os.environ.get(name, default)

# Token fourni par BotFather (utilise la variable d'environnement)
TELEGRAM_TOKEN = get_env_variable('TELEGRAM_TOKEN', '')

# Configuration MongoDB (principale)
MONGODB_URI = get_env_variable('MONGODB_URI', '')
MONGODB_DB_NAME = get_env_variable('MONGODB_DB_NAME', 'fifa_predictor_db')

# Config pour utiliser MongoDB ou Google Sheets
USE_MONGODB = True  # Toujours utiliser MongoDB en premier choix

# V√©rification de la connexion MongoDB au d√©marrage
if USE_MONGODB and MONGODB_URI:
    try:
        from pymongo import MongoClient
        client = MongoClient(MONGODB_URI, serverSelectionTimeoutMS=5000)
        # V√©rifier la connexion en ex√©cutant une commande simple
        client.admin.command('ping')
        logger.info("Connexion √† MongoDB √©tablie avec succ√®s!")
    except Exception as e:
        logger.error(f"Impossible de se connecter √† MongoDB: {e}")
        logger.warning("Retour √† Google Sheets comme solution de secours.")
        USE_MONGODB = False

# Configuration Google Sheets (secondaire, conserv√©e pour migration/compatibilit√©)
# Pour le d√©ploiement, nous pouvons recevoir les credentials sous forme de JSON string
GOOGLE_CREDENTIALS_JSON = get_env_variable('GOOGLE_CREDENTIALS_JSON')
if GOOGLE_CREDENTIALS_JSON:
    # Cr√©e un fichier temporaire pour stocker les credentials
    temp_dir = tempfile.gettempdir()
    CREDENTIALS_FILE = Path(temp_dir) / "google_credentials.json"
    with open(CREDENTIALS_FILE, 'w') as f:
        f.write(GOOGLE_CREDENTIALS_JSON)
else:
    # En local, utilise le fichier
    CREDENTIALS_FILE = 'google_credentials.json'

# ID de la feuille Google Sheets (pour la migration/compatibilit√©)
SPREADSHEET_ID = get_env_variable('SPREADSHEET_ID', '')

# Param√®tres de pr√©diction
MAX_PREDICTIONS_HALF_TIME = int(get_env_variable('MAX_PREDICTIONS_HALF_TIME', 3))
MAX_PREDICTIONS_FULL_TIME = int(get_env_variable('MAX_PREDICTIONS_FULL_TIME', 3))

# Configuration du canal officiel
OFFICIAL_CHANNEL = "@alvecapitalofficiel"  # Uniformis√© pour √©viter les confusions

# √âtats pour la conversation
TEAM_INPUT = 1
ODDS_INPUT = 2
ENTERING_ODDS = 3

# Messages du bot
WELCOME_MESSAGE = """
üëã Bienvenue sur FIFA 4x4 Predictor!

Je vous aide √† pr√©dire les r√©sultats de matchs de football FIFA 4x4 en me basant sur des donn√©es historiques.

‚ö†Ô∏è Pour utiliser toutes les fonctionnalit√©s, vous devez √™tre abonn√© √† notre canal {channel}.

Pour obtenir une pr√©diction, utilisez la commande:
/predict √âquipe1 vs √âquipe2

Exemple: /predict Manchester United vs Chelsea
""".format(channel=OFFICIAL_CHANNEL)

HELP_MESSAGE = """
üîÆ *Commandes disponibles*:

/start - D√©marrer le bot et v√©rifier l'abonnement
/help - Afficher l'aide
/predict [√âquipe1] vs [√âquipe2] - Obtenir une pr√©diction de match
/odds [√âquipe1] vs [√âquipe2] [cote1] [cote2] - Pr√©diction avec les cotes
/teams - Voir toutes les √©quipes disponibles
/check - V√©rifier l'abonnement au canal
/games - Menu des jeux disponibles

*Exemples:*
/predict Manchester United vs Chelsea
/odds Manchester United vs Chelsea 1.8 3.5

‚ö†Ô∏è L'abonnement au canal {channel} est requis pour utiliser ces fonctionnalit√©s.
""".format(channel=OFFICIAL_CHANNEL)

# Nombre maximum de parrainages requis
MAX_REFERRALS = 1  # Un seul parrainage par utilisateur

# Limites et param√®tres de performance
CACHE_EXPIRE_SECONDS = 300  # 5 minutes de cache pour r√©duire les appels √† la BD
REQUEST_THROTTLE_MS = 500  # Limiter les requ√™tes fr√©quentes (en millisecondes)
MAX_CONCURRENT_USERS = 200  # Limite th√©orique d'utilisateurs simultan√©s

# Param√®tres d'animation pour l'interface
ANIMATION_FAST = True  # R√©duit les d√©lais d'animation pour une meilleure r√©activit√©

# Param√®tres de timeouts et de tentatives
REQUEST_TIMEOUT_SECONDS = 10  # Timeout pour les requ√™tes externes
MAX_RETRIES = 3  # Nombre maximal de tentatives pour les op√©rations externes

# Mode de d√©veloppement/d√©bogage
DEBUG = get_env_variable('DEBUG', 'False').lower() == 'true'

# Informations affich√©es au d√©marrage du bot
logger.info(f"Configuration charg√©e: Mode DEBUG={DEBUG}")
logger.info(f"Base de donn√©es principale: {'MongoDB' if USE_MONGODB else 'Google Sheets'}")
logger.info(f"Canal officiel: {OFFICIAL_CHANNEL}")
logger.info(f"Parrainages requis: {MAX_REFERRALS}")

# V√©rification de la configuration au d√©marrage
if not TELEGRAM_TOKEN:
    logger.error("ERREUR CRITIQUE: Token Telegram non d√©fini!")

if not MONGODB_URI and USE_MONGODB:
    logger.error("ERREUR: URI MongoDB non d√©finie alors que MongoDB est activ√©!")

# Affichage condens√© de la configuration pour d√©bogage
if DEBUG:
    config_summary = {
        "USE_MONGODB": USE_MONGODB,
        "MONGODB_DB": MONGODB_DB_NAME,
        "MAX_REFERRALS": MAX_REFERRALS,
        "ANIMATION_FAST": ANIMATION_FAST,
        "CACHE_EXPIRE_SECONDS": CACHE_EXPIRE_SECONDS
    }
    logger.debug(f"R√©sum√© de la configuration: {json.dumps(config_summary)}")
